import unittest

from agent import AIAgent
from arena import Arena
from container import Move, Row, Direction
from rule import RenjuRule, WHITE, BLACK, BLANK


def parse_board(board_string: str):
    return [[BLANK if c == '.' else BLACK if c == 'O' else WHITE for c in r.strip()] for r in board_string.strip().splitlines()]


class AIAgentTest(unittest.TestCase):
    renju = RenjuRule()
    black_agent = AIAgent()
    black_agent.color = BLACK
    white_agent = AIAgent()
    white_agent.color = WHITE

    def test_무조건_둬야하는_수(self):
        board_string = '''
            OOOO...........
            ...............
            ...............
            ...............
            ...............
            ...............
            ...............
            ...............
            ...............
            ...............
            ...............
            ...............
            ...............
            ...............
            ...............
        '''
        board = parse_board(board_string)
        result = self.black_agent._calc_best_move(board, self.renju, max_depth=1)
        self.assertEqual((Arena.MOVE, Move(0, 4, BLACK)), result)

    def test_무조건_둬야하는_수2(self):
        board_string = '''
            ...............
            ...............
            ...............
            ...............
            ...............
            ...............
            ...............
            .....OO.OO.....
            ...............
            ...............
            ...............
            ...............
            ...............
            ...............
            ...............
        '''
        board = parse_board(board_string)
        for depth in range(1, 5):
            result = self.black_agent._calc_best_move(board, self.renju, max_depth=depth)
            print('TEST depth:', depth, end=' ')
            self.assertEqual((Arena.MOVE, Move(7, 7, BLACK)), result)
            print('SUCCESS')

    def test_무조건_둬야하는_수3(self):
        board_string = '''
            ...............
            ...............
            ...............
            ...............
            ...............
            .....O.........
            ......O........
            .....OO.OO.....
            ........O......
            .........O.....
            ...............
            ...............
            ...............
            ...............
            ...............
        '''
        board = parse_board(board_string)
        for depth in range(1, 5):
            result = self.black_agent._calc_best_move(board, self.renju, max_depth=depth)
            print('TEST depth:', depth, end=' ')
            self.assertEqual((Arena.MOVE, Move(7, 7, BLACK)), result)
            print('SUCCESS')

    def test_무조건_둬야하는_수4(self):
        board_string = '''
            ...............
            ...............
            ...............
            ...............
            .....XOXOOOO...
            .......X.......
            .....XXOX......
            .....X.O.X.....
            .....OOXX.X.....
            .......O...O...
            .......O.......
            ...............
            ...............
            ...............
            ...............
        '''
        board = parse_board(board_string)
        result = self.black_agent._calc_best_move(board, self.renju)
        self.assertEqual((Arena.MOVE, Move(4, 12, BLACK)), result)

    def test_무조건_둘중하나엔_둬야하는_수(self):
        board_string = '''
            ...............
            ...............
            ...............
            ...............
            .........O.....
            .....O.........
            .........O.....
            ......OOOO.....
            ...............
            .........O.....
            ...............
            ...............
            ...............
            ...............
            ...............
        '''
        board = parse_board(board_string)
        for depth in range(1, 5):
            result = self.black_agent._calc_best_move(board, self.renju, max_depth=depth)
            print('TEST depth:', depth, end=' ')
            self.assertIn(result, ((Arena.MOVE, Move(7, 5, BLACK)), (Arena.MOVE, Move(7, 10, BLACK))))
            print('SUCCESS')

    def test_무조건_둘중하나엔_둬야하는_수2(self):
        board_string = '''
            ...............
            ...............
            ...............
            ...............
            .........O.....
            .....O.........
            .........O.....
            ......OOO......
            ...............
            ...............
            ...............
            ...............
            ...............
            ...............
            ...............
        '''
        board = parse_board(board_string)
        for depth in range(3, 5):
            result = self.black_agent._calc_best_move(board, self.renju, max_depth=depth)
            print('TEST depth:', depth, end=' ')
            self.assertIn(result, ((Arena.MOVE, Move(7, 5, BLACK)), (Arena.MOVE, Move(7, 9, BLACK))))
            print('SUCCESS')

    def test_무조건_막아야_하는_수(self):
        board_string = '''
            OOOO...........
            ...............
            ...............
            ...............
            ...............
            ...............
            ...............
            ...............
            ...............
            ...............
            ...............
            ...............
            ...............
            ...............
            ...............
        '''
        board = parse_board(board_string)
        for depth in range(1, 5):
            result = self.white_agent._calc_best_move(board, self.renju, max_depth=depth)
            print('TEST depth:', depth, end='')
            self.assertEqual((Arena.MOVE, Move(0, 4, WHITE)), result)
            print('SUCCESS')

    def test_무조건_막아야_하는_수2(self):
        board_string = '''
            ...............
            ...............
            ...............
            ...............
            ...............
            ...............
            ...............
            .....OO.OO.....
            ...............
            ...............
            ...............
            ...............
            ...............
            ...............
            ...............
        '''
        board = parse_board(board_string)
        for depth in range(1, 5):
            result = self.white_agent._calc_best_move(board, self.renju, max_depth=depth)
            print('TEST depth:', depth, end='')
            self.assertEqual((Arena.MOVE, Move(7, 7, WHITE)), result)
            print('SUCCESS')

    def test_안두면_바보인_수(self):
        board_string = '''
            ...............
            ...............
            ...............
            ...............
            ...............
            .......XX......
            ......XO.......
            ......OOX......
            .....O.........
            ....OO.........
            ...X...........
            ...............
            ...............
            ...............
            ...............
        '''
        board = parse_board(board_string)
        result = self.white_agent._calc_best_move(board, self.renju)
        self.assertEqual((Arena.MOVE, Move(4, 8, WHITE)), result)


class RuleTest(unittest.TestCase):
    renju = RenjuRule()

    def test_get_rows1(self):
        board_string = '''
            ...............
            ...............
            ...............
            ....O.....O....
            .....O...O.....
            ......O........
            .....O.OOO.....
            .......O.......
            .....O.O.O.....
            ....O..........
            ...O...........
            ...............
            ...............
            ...............
            ...............
        '''
        board = parse_board(board_string)
        move = Move(6, 7, BLACK)
        _, threes, fours = self.renju.get_rows(board, move)
        self.assertEqual((len(threes), len(fours)), (3, 3))

    def test_is_explicitly_closed_three(self):
        def assert_explicitly_closed(move_list, inner_blank, direction, result):
            self.assertEqual(self.renju.is_explicitly_closed_three(board, Row(move_list, inner_blank, direction), BLACK), result)

        board_string = '''
            ...............
            .......X.OO.O.X
            ...............
            ....O.....O....
            .....O...O.....
            ......O........
            .....O.OOO.....
            .......O.......
            .....O.O.O.....
            ....O..........
            ...O...X.OOO.X.
            ...........OOO.
            ...OO.OX....O..
            .....O.OOO.O...
            ...............
        '''
        board = parse_board(board_string)

        assert_explicitly_closed([(6, 7), (6, 8), (6, 9)], None, Direction(0, 1), True)
        assert_explicitly_closed([(6, 7), (7, 7), (8, 7)], None, Direction(1, 0), False)
        assert_explicitly_closed([(12, 3), (12, 4), (12, 6)], (12, 5), Direction(0, 1), True)
        assert_explicitly_closed([(13, 7), (13, 8), (13, 9)], None, Direction(0, 1), True)
        assert_explicitly_closed([(13, 11), (12, 12), (11, 13)], None, Direction(-1, 1), True)
        assert_explicitly_closed([(11, 11), (11, 12), (11, 13)], None, Direction(0, 1), False)
        assert_explicitly_closed([(10, 9), (10, 10), (10, 11)], None, Direction(0, 1), True)
        assert_explicitly_closed([(1, 9), (1, 10), (1, 12)], (1, 11), Direction(0, 1), False)


if __name__ == '__main__':
    unittest.main()
